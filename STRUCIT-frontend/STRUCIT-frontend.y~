%{
	#include<stdio.h>
	#include<stdlib.h>
	#include<string.h>
%}

%token IDENTIFIER CONSTANT STRING_LITERAL 
%token ARROW LESS_THAN_EQUAL GREATER_THAN_EQUAL EQUAL NOT_EQUAL
%token LESS_THAN GREATER_THAN
%token AND OR  DIV_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN

%token EXTERN
%token INT VOID
%token STRUCT SIZEOF

%token IF ELSE WHILE FOR RETURN
%token LEFT_PAREN RIGHT_PAREN
%token LEFT_BRACE RIGHT_BRACE
%token COMMA SEMICOLON
%token ADDRESS
%token PLUS ASSIGN DIVIDE MULTIPLY MINUS

%start program
%%

primary_expression
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| LEFT_PAREN expression RIGHT_PAREN
	;

postfix_expression
	: primary_expression
	| postfix_expression LEFT_PAREN RIGHT_PAREN
	| postfix_expression LEFT_PAREN argument_expression_list RIGHT_PAREN
	| postfix_expression ARROW IDENTIFIER
	;

argument_expression_list
	: assignment_expression
	| argument_expression_list COMMA assignment_expression
	;

unary_expression
	: postfix_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF LEFT_PAREN type_name RIGHT_PAREN
	;

unary_operator
	: ADDRESS
	| pointer
	| PLUS
	| MINUS
	;

cast_expression
	: unary_expression
	| LEFT_PAREN type_name RIGHT_PAREN cast_expression
	;

multiplicative_expression
	: cast_expression
	| multiplicative_expression MULTIPLY cast_expression
	| multiplicative_expression DIVIDE cast_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression PLUS multiplicative_expression
	| additive_expression MINUS multiplicative_expression
	;

relational_expression
	: additive_expression
	| relational_expression LESS_THAN additive_expression
	| relational_expression GREATER_THAN additive_expression
	| relational_expression LESS_THAN_EQUAL additive_expression
	| relational_expression GREATER_THAN_EQUAL additive_expression
	;

equality_expression
	: relational_expression
	| equality_expression EQUAL relational_expression
	| equality_expression NOT_EQUAL relational_expression
	;

logical_and_expression
	: equality_expression
	| logical_and_expression AND equality_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR logical_and_expression
	;

assignment_expression
	: logical_or_expression

	// Ca sert a affecter un terme unaire
// *ptr = a || b;
	// ptr->name = "aa";
	| unary_expression assignment_operator assignment_expression
	;

if_expression
	: logical_or_expression
	;

assignment_operator
	: ASSIGN
	| MULTIPLY
	| DIV_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	;

expression
	: assignment_expression
	| expression COMMA assignment_expression
	;

declaration
	: declaration_specifiers init_declarator_list SEMICOLON
	| declaration_specifiers SEMICOLON
	;

declaration_specifiers
	: type_specifier
	| type_specifier declaration_specifiers
	;

init_declarator_list
	: init_declarator
	| init_declarator_list COMMA init_declarator
	;

init_declarator
	: declarator

	// Autorise la declaration durant la definition
	| declarator ASSIGN initializer
	;

type_specifier
	: VOID
	| INT
	| struct_or_union_specifier
	;

struct_or_union_specifier
	: STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
	| STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE
	| STRUCT IDENTIFIER
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list SEMICOLON
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	;

struct_declarator_list
	: struct_declarator
	| struct_declarator_list COMMA struct_declarator
	;

struct_declarator
	: declarator
	;

declarator
	: pointer_direct_declarator
	| direct_declarator
	;


pointer_direct_declarator
	: pointer direct_declarator_pointer
	| pointer
	;

direct_declarator
	: IDENTIFIER
	| LEFT_PAREN declarator RIGHT_PAREN
	| direct_declarator LEFT_PAREN parameter_list RIGHT_PAREN
	| direct_declarator LEFT_PAREN identifier_list RIGHT_PAREN
	| direct_declarator LEFT_PAREN RIGHT_PAREN
	;

direct_declarator_pointer
	: IDENTIFIER
	| LEFT_PAREN declarator RIGHT_PAREN
	| LEFT_PAREN pointer_direct_declarator RIGHT_PAREN LEFT_PAREN parameter_list RIGHT_PAREN
	| LEFT_PAREN pointer_direct_declarator RIGHT_PAREN LEFT_PAREN RIGHT_PAREN
	| direct_declarator_pointer LEFT_PAREN parameter_list RIGHT_PAREN
	| direct_declarator_pointer LEFT_PAREN identifier_list RIGHT_PAREN
	| direct_declarator_pointer LEFT_PAREN RIGHT_PAREN
	;

direct_declarator_function_pointer
	: pointer IDENTIFIER
	;

pointer
	: MULTIPLY
	;

parameter_list
	: parameter_declaration
	| parameter_list COMMA parameter_declaration
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	: IDENTIFIER
	| identifier_list COMMA IDENTIFIER
	;

type_name
	: specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator
	;

abstract_declarator
	: abstract_declarator_with_pointer
	| direct_abstract_declarator
	;

abstract_declarator_with_pointer
	: pointer
	| pointer direct_abstract_declarator_pointer_free

direct_abstract_declarator
	: LEFT_PAREN abstract_declarator RIGHT_PAREN
	| LEFT_PAREN RIGHT_PAREN
	| LEFT_PAREN parameter_list RIGHT_PAREN
	| direct_abstract_declarator LEFT_PAREN RIGHT_PAREN
	| direct_abstract_declarator LEFT_PAREN parameter_list RIGHT_PAREN
	;

direct_abstract_declarator_pointer_free
	: LEFT_PAREN direct_abstract_declarator_pointer_free RIGHT_PAREN
	| LEFT_PAREN RIGHT_PAREN
	| LEFT_PAREN parameter_list RIGHT_PAREN
	| direct_abstract_declarator_pointer_free LEFT_PAREN RIGHT_PAREN
	| direct_abstract_declarator_pointer_free LEFT_PAREN parameter_list RIGHT_PAREN
	;

initializer
	: assignment_expression
	;

statement
	: compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

compound_statement
	: LEFT_BRACE RIGHT_BRACE
	| LEFT_BRACE block_item_list RIGHT_BRACE
	| SEMICOLON
	;

block_item_list
	: block_item
	| block_item_list block_item
	;

block_item
	: declaration
	| statement
	;

expression_statement
	: SEMICOLON
	| expression SEMICOLON
	;

selection_statement
	: IF LEFT_PAREN if_expression RIGHT_PAREN statement
	| IF LEFT_PAREN if_expression RIGHT_PAREN statement ELSE statement
	;

iteration_statement
	: WHILE LEFT_PAREN expression RIGHT_PAREN statement
	| FOR LEFT_PAREN expression_statement expression_statement RIGHT_PAREN statement
	| FOR LEFT_PAREN expression_statement expression_statement expression RIGHT_PAREN statement
	| FOR LEFT_PAREN declaration expression_statement RIGHT_PAREN statement
	| FOR LEFT_PAREN declaration expression_statement expression RIGHT_PAREN statement
	;

jump_statement
	: RETURN expression SEMICOLON
  	| RETURN SEMICOLON
	;

program
  	: external_declaration
	| program external_declaration
	;

external_declaration
	: function_definition external_declaration
	| declaration external_declaration
	| %empty
	| {printf("erreur");}
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	;

declaration_list
	: declaration
	| declaration_list declaration
	;


%%

#include "lex.yy.c"
int main()
{
	yyin=fopen("exemple-strucit-frontend.c","r");
	yyparse();
	fclose(yyin);
	return 0;
}
